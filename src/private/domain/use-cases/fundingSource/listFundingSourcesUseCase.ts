/*
 * Copyright Â© 2023 Anonyome Labs, Inc. All rights reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

import {
  CachePolicy,
  DefaultLogger,
  Logger,
  NotSignedInError,
} from '@sudoplatform/sudo-common'
import { BankAccountType } from '../../../../public/typings/bankAccountType'
import { CardType } from '../../../../public/typings/cardType'
import {
  CreditCardNetwork,
  FundingSourceState,
  FundingSourceType,
  FundingSourceFlags,
  FundingSourceFilterInput,
} from '../../../../public/typings/fundingSource'
import { FundingSourceService } from '../../entities/fundingSource/fundingSourceService'
import { SudoUserService } from '../../entities/sudoUser/sudoUserService'
import { SortOrder } from '../../../../public'

/**
 * Input for {@link ListFundingSourcesUseCase}.
 *
 * @interface ListFundingSourcesUseCaseInput
 * @property {CachePolicy} cachePolicy Cache policy determines the strategy for accessing the funding source records.
 * @property {number} limit Number of records to return. If omitted, the limit defaults to 10.
 * @property {string} nextToken A token generated by a previous call. This allows for pagination.
 */
interface ListFundingSourcesUseCaseInput {
  filterInput?: FundingSourceFilterInput
  sortOrder?: SortOrder
  cachePolicy?: CachePolicy
  limit?: number | undefined
  nextToken?: string | undefined
}

/**
 * Output for {@link ListFundingSourcesUseCase}.
 *
 * @interface ListFundingSourcesUseCaseOutput
 * @property {Array} fundingSources The list of funding sources retrieved in this use case.
 * @property {string} nextToken A token generated by a previous call. This allows for pagination.
 */
interface BaseListFundingSourcesUseCaseOutputItem {
  id: string
  owner: string
  version: number
  createdAt: Date
  updatedAt: Date
  type: FundingSourceType
  state: FundingSourceState
  flags: FundingSourceFlags[]
  currency: string
}

interface ListFundingSourcesUseCaseOutputCreditCardItem
  extends BaseListFundingSourcesUseCaseOutputItem {
  type: FundingSourceType.CreditCard
  last4: string
  network: CreditCardNetwork
  cardType: CardType
}

interface ListFundingSourcesUseCaseOutputBankAccountItem
  extends BaseListFundingSourcesUseCaseOutputItem {
  type: FundingSourceType.BankAccount
  bankAccountType: BankAccountType
  last4: string
  institutionName: string
  institutionLogo?: {
    type: string
    data: string
  }
}

type ListFundingSourcesUseCaseOutputItem =
  | ListFundingSourcesUseCaseOutputCreditCardItem
  | ListFundingSourcesUseCaseOutputBankAccountItem

interface ListFundingSourcesUseCaseOutput {
  fundingSources: Array<ListFundingSourcesUseCaseOutputItem>
  nextToken?: string
}

/**
 * Application business logic for listing funding sources.
 */
export class ListFundingSourcesUseCase {
  private readonly log: Logger

  constructor(
    private readonly fundingSourceService: FundingSourceService,
    private readonly userService: SudoUserService,
  ) {
    this.log = new DefaultLogger(this.constructor.name)
  }

  async execute({
    filterInput,
    sortOrder,
    cachePolicy,
    limit,
    nextToken,
  }: ListFundingSourcesUseCaseInput): Promise<ListFundingSourcesUseCaseOutput> {
    this.log.debug(this.constructor.name, {
      filterInput,
      sortOrder,
      cachePolicy,
      limit,
      nextToken,
    })
    if (!(await this.userService.isSignedIn())) {
      throw new NotSignedInError()
    }
    return await this.fundingSourceService.listFundingSources({
      filterInput,
      sortOrder,
      cachePolicy,
      limit,
      nextToken,
    })
  }
}
