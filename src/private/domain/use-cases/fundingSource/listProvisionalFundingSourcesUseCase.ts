/*
 * Copyright Â© 2024 Anonyome Labs, Inc. All rights reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

import {
  CachePolicy,
  DefaultLogger,
  Logger,
  NotSignedInError,
} from '@sudoplatform/sudo-common'
import {
  FundingSourceType,
  ProvisionalFundingSourceFilterInput,
  ProvisionalFundingSourceState,
} from '../../../../public/typings/fundingSource'
import { FundingSourceService } from '../../entities/fundingSource/fundingSourceService'
import { SudoUserService } from '../../entities/sudoUser/sudoUserService'

/**
 * Input for {@link ListFundingSourcesUseCase}.
 *
 * @interface ListProvisionalFundingSourcesUseCaseInput
 * @property {ProvisionalFundingSourceFilterInput} provisionalFundingSourcesFilterInput input to filter the
 *            list of provisional funding sources to return.
 * @property {CachePolicy} cachePolicy Cache policy determines the strategy for accessing the provisional funding source records.
 * @property {number} limit Number of records to return. If omitted, the limit defaults to 10.
 * @property {string} nextToken A token generated by a previous call. This allows for pagination.
 */
interface ListProvisionalFundingSourcesUseCaseInput {
  filter?: ProvisionalFundingSourceFilterInput
  cachePolicy?: CachePolicy
  limit?: number | undefined
  nextToken?: string | undefined
}

/**
 * Output for {@link ListProvisionalFundingSourcesUseCase}.
 *
 * @interface ListProvisionalFundingSourcesUseCaseOutput
 * @property {Array} provisionalFundingSources The list of provisional funding sources retrieved in this use case.
 * @property {string} nextToken A token generated for use in pagination.
 */
interface ListProvisionalFundingSourcesUseCaseOutputItem {
  id: string
  owner: string
  version: number
  createdAt: Date
  updatedAt: Date
  type: FundingSourceType
  state: ProvisionalFundingSourceState
  last4: string
  provisioningData: string
}

interface ListProvisionalFundingSourcesUseCaseOutput {
  provisionalFundingSources: Array<ListProvisionalFundingSourcesUseCaseOutputItem>
  nextToken?: string
}

/**
 * Application business logic for listing provisional funding sources.
 */
export class ListProvisionalFundingSourcesUseCase {
  private readonly log: Logger

  constructor(
    private readonly fundingSourceService: FundingSourceService,
    private readonly userService: SudoUserService,
  ) {
    this.log = new DefaultLogger(this.constructor.name)
  }

  async execute({
    filter,
    cachePolicy,
    limit,
    nextToken,
  }: ListProvisionalFundingSourcesUseCaseInput): Promise<ListProvisionalFundingSourcesUseCaseOutput> {
    this.log.debug(this.constructor.name, {
      filter,
      cachePolicy,
      limit,
      nextToken,
    })
    if (!(await this.userService.isSignedIn())) {
      throw new NotSignedInError()
    }
    return await this.fundingSourceService.listProvisionalFundingSources({
      filterInput: filter,
      cachePolicy,
      limit,
      nextToken,
    })
  }
}
