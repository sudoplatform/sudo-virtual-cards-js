import { CachePolicy } from '@sudoplatform/sudo-common'
import { FundingSourceType } from '../../../..'
import { FundingSourceEntity } from './fundingSourceEntity'
import { ProvisionalFundingSourceEntity } from './provisionalFundingSourceEntity'

export interface FundingSourceServiceSetupFundingSourceInput {
  type: FundingSourceType
  currency: string
}

export interface FundingSourceServiceCompleteFundingSourceInput {
  id: string
  completionData: { provider: string; version: number; paymentMethod: string }
}

/**
 * Input for {@link FundingSourceService.getFundingSource} method.
 *
 * @interface GetFundingSourceInput
 * @property {string} id The identifier of the funding source to retrieve.
 * @property {CachePolicy} cachePolicy Cache policy determines the strategy for accessing the funding source records.
 */
export interface FundingSourceServiceGetFundingSourceInput {
  id: string
  cachePolicy?: CachePolicy
}

/**
 * Input for {@link FundingSourceService.listFundingSources} method.
 *
 * @interface ListFundingSourcesInput
 * @property {CachePolicy} cachePolicy Cache policy determines the strategy for accessing the funding source records.
 * @property {number} limit Number of records to return. If omitted, the limit defaults to 10.
 * @property {string} nextToken A token generated by a previous call to {@link FundingSourceService.listFundingSources}.
 */
export interface FundingSourceServiceListFundingSourcesInput {
  cachePolicy?: CachePolicy
  limit?: number
  nextToken?: string
}

/**
 * Output for {@link FundingSourceService.listFundingSources} method.
 *
 * @interface ListFundingSourcesOutput
 * @property {FundingSourceEntity[]} fundingSources The list of funding sources retrieved in this query.
 * @property {string} nextToken A token generated by a previous call. This allows for pagination.
 */
export interface FundingSourceServiceListFundingSourcesOutput {
  fundingSources: FundingSourceEntity[]
  nextToken?: string
}

/**
 * Input for {@link FundingSourceService.cancelFundingSource} method.
 *
 * @interface CancelFundingSourceInput
 * @property {string} id The identifier of the funding source to cancel.
 */
export interface FundingSourceServiceCancelFundingSourceInput {
  id: string
}

/**
 * Core entity representation of a funding source service used in business logic. Used to perform operations for funding sources.
 *
 * @interface FundingSourceService
 */
export interface FundingSourceService {
  getFundingSourceClientConfiguration(): Promise<string>

  setupFundingSource(
    input: FundingSourceServiceSetupFundingSourceInput,
  ): Promise<ProvisionalFundingSourceEntity>

  completeFundingSource(
    input: FundingSourceServiceCompleteFundingSourceInput,
  ): Promise<FundingSourceEntity>

  /**
   * Get a funding source.
   *
   * @param {FundingSourceServiceGetFundingSourceInput} input Parameters used to retrieve a funding source.
   * @returns {FundingSourceEntity | undefined} The funding source, or undefined if not found.
   */
  getFundingSource(
    input: FundingSourceServiceGetFundingSourceInput,
  ): Promise<FundingSourceEntity | undefined>

  /**
   * List funding sources.
   *
   * @param {FundingSourceServiceListFundingSourcesInput} input Parameters used to list funding sources.
   * @returns {FundingSourceServiceListFundingSourcesOutput} The list of any funding sources. Can be empty if no funding sources found.
   */
  listFundingSources(
    input: FundingSourceServiceListFundingSourcesInput,
  ): Promise<FundingSourceServiceListFundingSourcesOutput>

  /**
   * Cancel a funding source.
   *
   * @param {FundingSourceServiceCancelFundingSourceInput} input Parameters used to cancel a funding source.
   * @returns {FundingSourceEntity} The funding source that was cancelled.
   */
  cancelFundingSource(
    input: FundingSourceServiceCancelFundingSourceInput,
  ): Promise<FundingSourceEntity>
}
