/*
 * Copyright Â© 2023 Anonyome Labs, Inc. All rights reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

import { CachePolicy } from '@sudoplatform/sudo-common'
import {
  AuthorizationText,
  SandboxGetPlaidDataInput,
  SandboxSetFundingSourceToRequireRefreshInput,
  SortOrder,
} from '../../../../public'
import {
  FundingSourceChangeSubscriber,
  FundingSourceFilterInput,
  FundingSourceType,
  ProvisionalFundingSourceFilterInput,
} from '../../../../public/typings/fundingSource'
import { FundingSourceEntity } from './fundingSourceEntity'
import { ProvisionalFundingSourceEntity } from './provisionalFundingSourceEntity'
import { SandboxPlaidDataEntity } from './sandboxPlaidDataEntity'

export interface FundingSourceServiceSetupData {
  applicationName: string
}

export interface FundingSourceServiceSetupFundingSourceInput {
  type: FundingSourceType
  currency: string
  supportedProviders?: string[]
  setupData: FundingSourceServiceSetupData
}

export interface FundingSourceServiceStripeCardCompletionData {
  provider: 'stripe'
  type?: FundingSourceType.CreditCard
  paymentMethod: string
}

export interface FundingSourceServiceCheckoutBankAccountCompletionData {
  provider: 'checkout'
  type: FundingSourceType.BankAccount
  publicToken: string
  accountId: string
  institutionId: string
  authorizationText: AuthorizationText
}

export type FundingSourceServiceCompletionData =
  | FundingSourceServiceStripeCardCompletionData
  | FundingSourceServiceCheckoutBankAccountCompletionData

export interface FundingSourceServiceCheckoutBankAccountRefreshData {
  provider: 'checkout'
  type: FundingSourceType.BankAccount
  applicationName: string
  accountId?: string
  authorizationText?: AuthorizationText
}

export type FundingSourceServiceRefreshData =
  FundingSourceServiceCheckoutBankAccountRefreshData

export function isFundingSourceServiceStripeCardCompletionData(
  d: FundingSourceServiceCompletionData,
): d is FundingSourceServiceStripeCardCompletionData {
  return (
    d.provider === 'stripe' &&
    (d.type === undefined || d.type === FundingSourceType.CreditCard)
  )
}

export function isFundingSourceServiceCheckoutBankAccountCompletionData(
  d: FundingSourceServiceCompletionData,
): d is FundingSourceServiceCheckoutBankAccountCompletionData {
  return d.provider === 'checkout' && d.type === FundingSourceType.BankAccount
}

export function isFundingSourceServiceCheckoutBankAccountRefreshData(
  d: FundingSourceServiceRefreshData,
): d is FundingSourceServiceCheckoutBankAccountRefreshData {
  return d.provider === 'checkout' && d.type === FundingSourceType.BankAccount
}

export interface FundingSourceServiceCompleteFundingSourceInput {
  id: string
  completionData: FundingSourceServiceCompletionData
  updateCardFundingSource?: boolean
}
export interface FundingSourceServiceRefreshFundingSourceInput {
  id: string
  refreshData: FundingSourceServiceRefreshData
  language?: string
}

/**
 * Input for {@link FundingSourceService.getFundingSource} method.
 *
 * @interface GetFundingSourceInput
 * @property {string} id The identifier of the funding source to retrieve.
 * @property {CachePolicy} cachePolicy Cache policy determines the strategy for accessing the funding source records.
 */
export interface FundingSourceServiceGetFundingSourceInput {
  id: string
  cachePolicy?: CachePolicy
}

/**
 * Input for {@link FundingSourceService.listFundingSources} method.
 *
 * @interface ListFundingSourcesInput
 * @property {CachePolicy} cachePolicy Cache policy determines the strategy for accessing the funding source records.
 * @property {number} limit Number of records to return. If omitted, the limit defaults to 10.
 * @property {string} nextToken A token generated by a previous call to {@link FundingSourceService.listFundingSources}.
 */
export interface FundingSourceServiceListFundingSourcesInput {
  filterInput?: FundingSourceFilterInput
  sortOrder?: SortOrder
  cachePolicy?: CachePolicy
  limit?: number
  nextToken?: string
}

/**
 * Output for {@link FundingSourceService.listFundingSources} method.
 *
 * @interface ListFundingSourcesOutput
 * @property {FundingSourceEntity[]} fundingSources The list of funding sources retrieved in this query.
 * @property {string} nextToken A token generated for use in pagination.
 */
export interface FundingSourceServiceListFundingSourcesOutput {
  fundingSources: FundingSourceEntity[]
  nextToken?: string
}

/**
 * Input for {@link FundingSourceService.cancelFundingSource} method.
 *
 * @interface FundingSourceServiceCancelFundingSourceInput
 * @property {string} id The identifier of the funding source to cancel.
 */
export interface FundingSourceServiceCancelFundingSourceInput {
  id: string
}

/**
 * Input for {@link FundingSourceService.reviewUnfundedFundingSource} method.
 *
 * @interface FundingSourceServiceReviewUnfundedFundingSourceInput
 * @property {string} id The identifier of the funding source to review.
 */
export interface FundingSourceServiceReviewUnfundedFundingSourceInput {
  id: string
}

/**
 * Input for {@link FundingSourceService.cancelProvisionalFundingSource} method.
 *
 * @interface FundingSourceServiceCancelProvisionalFundingSourceInput
 * @property {string} id The identifier of the provisional funding source to cancel.
 */
export interface FundingSourceServiceCancelProvisionalFundingSourceInput {
  id: string
}

/**
 * Input for {@link FundingSourceService.listProvisionalFundingSources} method.
 *
 * @interface ListProvisionalFundingSourcesInput
 * @property {ProvisionalFundingSourceFilterInput} filterInput Filter applied to the list of provisional funding
 *            sources to return.
 * @property {CachePolicy} cachePolicy Cache policy determines the strategy for accessing the funding source records.
 * @property {number} limit Number of records to return. If omitted, the limit defaults to 10.
 * @property {string} nextToken A token generated by a previous call to {@link FundingSourceService.listProvisionalFundingSources}.
 */
export interface FundingSourceServiceListProvisionalFundingSourcesInput {
  filterInput?: ProvisionalFundingSourceFilterInput
  sortOrder?: SortOrder
  cachePolicy?: CachePolicy
  limit?: number
  nextToken?: string
}

/**
 * Output for {@link FundingSourceService.listProvisionalFundingSources} method.
 *
 * @interface ListProvisionalFundingSourcesOutput
 * @property {ProvisionalFundingSourceEntity[]} provisionalFundingSources The list of provisional
 *            funding sources retrieved in this query.
 * @property {string} nextToken A token generated for use in pagination.
 */
export interface FundingSourceServiceListProvisionalFundingSourcesOutput {
  provisionalFundingSources: ProvisionalFundingSourceEntity[]
  nextToken?: string
}

export interface FundingSourceServiceSubscribeToFundingSourceChangesInput {
  id: string
  owner: string
  subscriber: FundingSourceChangeSubscriber
}

export interface FundingSourceServiceUnsubscribeFromFundingSourceChangesInput {
  id: string
}

/**
 * Core entity representation of a funding source service used in business logic. Used to perform operations for funding sources.
 *
 * @interface FundingSourceService
 */
export interface FundingSourceService {
  getFundingSourceClientConfiguration(): Promise<string>

  setupFundingSource(
    input: FundingSourceServiceSetupFundingSourceInput,
  ): Promise<ProvisionalFundingSourceEntity>

  completeFundingSource(
    input: FundingSourceServiceCompleteFundingSourceInput,
  ): Promise<FundingSourceEntity>

  refreshFundingSource(
    input: FundingSourceServiceRefreshFundingSourceInput,
  ): Promise<FundingSourceEntity>

  /**
   * Get a funding source.
   *
   * @param {FundingSourceServiceGetFundingSourceInput} input Parameters used to retrieve a funding source.
   * @returns {FundingSourceEntity | undefined} The funding source, or undefined if not found.
   */
  getFundingSource(
    input: FundingSourceServiceGetFundingSourceInput,
  ): Promise<FundingSourceEntity | undefined>

  /**
   * List funding sources.
   *
   * @param {FundingSourceServiceListFundingSourcesInput} input Parameters used to list funding sources.
   * @returns {FundingSourceServiceListFundingSourcesOutput} The list of any funding sources. Can be empty if no funding sources found.
   */
  listFundingSources(
    input: FundingSourceServiceListFundingSourcesInput,
  ): Promise<FundingSourceServiceListFundingSourcesOutput>

  /**
   * Cancel a funding source.
   *
   * @param {FundingSourceServiceCancelFundingSourceInput} input Parameters used to cancel a funding source.
   * @returns {FundingSourceEntity} The funding source that was cancelled.
   */
  cancelFundingSource(
    input: FundingSourceServiceCancelFundingSourceInput,
  ): Promise<FundingSourceEntity>

  /**
   * Review a funding source.
   *
   * @param {FundingSourceServiceReviewUnfundedFundingSourceInput} input Parameters used to review a funding source.
   * @returns {FundingSourceEntity} The funding source that was cancelled.
   */
  reviewUnfundedFundingSource(
    input: FundingSourceServiceReviewUnfundedFundingSourceInput,
  ): Promise<FundingSourceEntity>

  /**
   * Cancel a provisional funding source.
   *
   * @param {FundingSourceServiceCancelProvisionalFundingSourceInput} input Parameters used to cancel a provisional funding source.
   * @returns {ProvisionalFundingSourceEntity} The provisional funding source that was cancelled.
   */
  cancelProvisionalFundingSource(
    input: FundingSourceServiceCancelProvisionalFundingSourceInput,
  ): Promise<ProvisionalFundingSourceEntity>

  /**
   * List provisional funding sources.
   *
   * @param {FundingSourceServiceListProvisionalFundingSourcesInput} input Parameters used to
   *         list provisional funding sources.
   * @returns {FundingSourceServiceListProvisionalFundingSourcesOutput}
   *           The list of any provisional funding sources. Can be empty if no provisional funding sources found.
   */
  listProvisionalFundingSources(
    input: FundingSourceServiceListProvisionalFundingSourcesInput,
  ): Promise<FundingSourceServiceListProvisionalFundingSourcesOutput>

  subscribeToFundingSourceChanges(
    input: FundingSourceServiceSubscribeToFundingSourceChangesInput,
  ): void

  unsubscribeFromFundingSourceChanges(
    input: FundingSourceServiceUnsubscribeFromFundingSourceChangesInput,
  ): void

  /*
   * Sandbox API
   */
  sandboxGetPlaidData(
    input: SandboxGetPlaidDataInput,
  ): Promise<SandboxPlaidDataEntity>

  sandboxSetFundingSourceToRequireRefresh(
    input: SandboxSetFundingSourceToRequireRefreshInput,
  ): Promise<FundingSourceEntity>
}
