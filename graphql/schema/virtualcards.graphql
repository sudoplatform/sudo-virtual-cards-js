interface CommonObject {
  id: ID!
  owner: ID!
  version: Int!
  createdAtEpochMs: Float!
  updatedAtEpochMs: Float!
}

interface CommonFundingSource {
  id: ID!
  owner: ID!
  version: Int!
  createdAtEpochMs: Float!
  updatedAtEpochMs: Float!
  state: FundingSourceState!
  currency: String!
  transactionVelocity: TransactionVelocity
}

enum KeyFormat {
  # PKCS#1 RSA Public Key
  RSA_PUBLIC_KEY

  # X.509 SubjectPublicKeyInfo
  SPKI
}

input CreatePublicKeyInput {
  keyId: String!
  keyRingId: String!
  algorithm: String!
  keyFormat: KeyFormat
  publicKey: String!
}

type PaginatedPublicKey {
  items: [PublicKey!]!
  nextToken: String
}

enum CardType {
  CREDIT
  DEBIT
  PREPAID
  OTHER
}

enum BankAccountType {
  SAVINGS
  CHECKING
  OTHER
}

type FundingSourceSupportDetail {
  cardType: CardType!
}

type FundingSourceSupportInfo {
  providerType: String!
  fundingSourceType: String!
  network: String!
  detail: [FundingSourceSupportDetail!]!
}

type CurrencyVelocity {
  currency: String!
  velocity: [String!]!
}

type CurrencyAmount {
  currency: String!
  amount: String!
}

type TransactionVelocity {
  maximum: Int
  velocity: [String!]
}

type VirtualCardsConfig {
  maxFundingSourceVelocity: [String!]!
  maxFundingSourceFailureVelocity: [String!]!
  maxCardCreationVelocity: [String!]!
  maxTransactionVelocity: [CurrencyVelocity!]!
  maxTransactionAmount: [CurrencyAmount!]!
  virtualCardCurrencies: [String!]!
  fundingSourceSupportInfo: [FundingSourceSupportInfo!]!
  bankAccountFundingSourceExpendableEnabled: Boolean!
  fundingSourceClientConfiguration: FundingSourceClientConfiguration
  clientApplicationsConfiguration: VirtualCardApplicationsConfiguration
}

type PublicKey {
  id: ID!
  keyId: String!
  keyRingId: String!
  algorithm: String!
  keyFormat: KeyFormat
  publicKey: String!
  owner: ID!
  version: Int!
  createdAtEpochMs: Float!
  updatedAtEpochMs: Float!
}

type SealedAddressAttribute {
  addressLine1: String!
  addressLine2: String
  city: String!
  state: String!
  postalCode: String!
  country: String!
}

type SealedExpiryAttribute {
  mm: String!
  yyyy: String!
}

type FundingSourceClientConfiguration {
  data: ID!
}

type VirtualCardApplicationsConfiguration {
  data: ID!
}

type SealedCardConnection {
  items: [SealedCard!]!
  nextToken: String
}

type CreditCardFundingSource implements CommonObject & CommonFundingSource {
  id: ID!
  owner: ID!
  version: Int!
  createdAtEpochMs: Float!
  updatedAtEpochMs: Float!
  state: FundingSourceState!
  currency: String!
  transactionVelocity: TransactionVelocity
  last4: String!
  network: CreditCardNetwork!
  cardType: CardType!
}

type SignedAuthorizationText {
  data: String!
  signature: String!
  algorithm: String!
  keyId: String!
  content: String!
  contentType: String!
  language: String!
}

type BankAccountFundingSource implements CommonObject & CommonFundingSource {
  id: ID!
  owner: ID!
  version: Int!
  createdAtEpochMs: Float!
  updatedAtEpochMs: Float!
  state: FundingSourceState!
  currency: String!
  transactionVelocity: TransactionVelocity
  bankAccountType: BankAccountType!
  authorization: SignedAuthorizationText!
  last4: String!
  institutionName: SealedAttribute!
  institutionLogo: SealedAttribute
}

union FundingSource = CreditCardFundingSource | BankAccountFundingSource

type ProvisionalFundingSource implements CommonObject {
  id: ID!
  owner: ID!
  version: Int!
  createdAtEpochMs: Float!
  updatedAtEpochMs: Float!
  state: ProvisionalFundingSourceState!
  provisioningData: ID!
}

type ProvisionalCard {
  id: ID!
  owner: ID!
  version: Int!
  createdAtEpochMs: Float!
  updatedAtEpochMs: Float!
  clientRefId: String!
  provisioningState: ProvisioningState!
  card: [SealedCard!]
}

type SealedCard {
  id: ID!
  owner: ID!
  version: Int!
  createdAtEpochMs: Float!
  updatedAtEpochMs: Float!
  algorithm: String!
  keyId: String!
  keyRingId: ID!
  owners: [Owner!]!
  fundingSourceId: ID!
  currency: String!
  state: CardState!
  activeToEpochMs: Float!
  cancelledAtEpochMs: Float
  last4: String!
  cardHolder: String! # SealedStringAttribute
  pan: String! # SealedStringAttribute
  csc: String! # SealedStringAttribute
  billingAddress: SealedAddressAttribute
  expiry: SealedExpiryAttribute!
  lastTransaction: SealedTransaction
  metadata: SealedAttribute

  # deprecated - set a property in metadata instead
  alias: String # SealedStringAttribute
}

type Owner {
  id: String!
  issuer: String!
}

type ProvisionalCardConnection {
  items: [ProvisionalCard!]!
  nextToken: String
}

type SealedTransaction {
  id: ID!
  owner: ID!
  version: Int!
  createdAtEpochMs: Float!
  updatedAtEpochMs: Float!
  sortDateEpochMs: Float!
  algorithm: String!
  keyId: String!
  cardId: ID!
  sequenceId: ID!
  type: TransactionType!
  transactedAtEpochMs: String!
  settledAtEpochMs: String
  billedAmount: SealedCurrencyAmountAttribute!
  transactedAmount: SealedCurrencyAmountAttribute!
  description: String!
  declineReason: String
  detail: [SealedTransactionDetailChargeAttribute!]
}

type SealedTransactionDetailChargeAttribute {
  virtualCardAmount: SealedCurrencyAmountAttribute!
  markup: SealedMarkupAttribute!
  markupAmount: SealedCurrencyAmountAttribute!
  fundingSourceAmount: SealedCurrencyAmountAttribute!
  fundingSourceId: ID!
  description: String!
  state: String
  continuationOfExistingCharge: Boolean
}

type SealedMarkupAttribute {
  percent: String!
  flat: String!
  minCharge: String
}

type SealedCurrencyAmountAttribute {
  currency: String!
  amount: String!
}

type SealedTransactionConnection {
  items: [SealedTransaction!]!
  nextToken: String
}

enum TransactionType {
  PENDING
  COMPLETE
  REFUND
  DECLINE
}

enum CardState {
  ISSUED
  FAILED
  CLOSED
  SUSPENDED
}

enum CreditCardNetwork {
  AMEX
  DINERS
  DISCOVER
  JCB
  MASTERCARD
  UNIONPAY
  VISA
  OTHER
}

enum ProvisionalFundingSourceState {
  PROVISIONING
  PENDING
  COMPLETED
  FAILED
}

enum FundingSourceState {
  ACTIVE
  INACTIVE
  REFRESH
}

enum FundingSourceType {
  CREDIT_CARD
  BANK_ACCOUNT
}

enum ProvisioningState {
  PROVISIONING
  COMPLETED
  FAILED
}

input SetupFundingSourceRequest {
  type: FundingSourceType!
  currency: String!
  supportedProviders: [String!]
  language: String
  setupData: ID
}

input CompleteFundingSourceRequest {
  id: ID!
  completionData: ID!
  updateCardFundingSource: Boolean
}

input RefreshFundingSourceRequest {
  id: ID!
  refreshData: ID!
  language: String
}

input IdInput {
  id: ID!
}

input AddressInput {
  addressLine1: String!
  addressLine2: String
  city: String!
  state: String!
  postalCode: String!
  country: String!
}

input CardProvisionRequest {
  clientRefId: String!
  ownerProofs: [ID!]!
  keyRingId: ID!
  fundingSourceId: ID!
  currency: String!

  cardHolder: String!
  billingAddress: AddressInput
  metadata: SealedAttributeInput

  # deprecated - set a property in metadata instead
  alias: String
}

input CardUpdateRequest {
  id: ID!
  keyId: String
  expectedVersion: Int
  cardHolder: String
  billingAddress: AddressInput
  metadata: SealedAttributeInput

  # deprecated - set a property in metadata instead
  alias: String
}

input CardCancelRequest {
  id: ID!
  keyId: String
}

type FundingSourceConnection {
  items: [FundingSource!]!
  nextToken: String
}

input DateRangeInput {
  startDateEpochMs: Float!
  endDateEpochMs: Float!
}

enum SortOrder {
  ASC
  DESC
}

type Query {
  getVirtualCardsConfig: VirtualCardsConfig!
  getPublicKeyForVirtualCards(
    keyId: String!
    keyFormats: [KeyFormat!]
  ): PublicKey
  getPublicKeysForVirtualCards(
    limit: Int
    nextToken: String
  ): PaginatedPublicKey!
  getKeyRingForVirtualCards(
    keyRingId: String!
    limit: Int
    nextToken: String
    keyFormats: [KeyFormat!]
  ): PaginatedPublicKey!
  getFundingSourceClientConfiguration: FundingSourceClientConfiguration!
  getFundingSource(id: ID!): FundingSource
  listFundingSources(limit: Int, nextToken: String): FundingSourceConnection!
  getProvisionalCard(id: ID!): ProvisionalCard
  listProvisionalCards(
    limit: Int
    nextToken: String
  ): ProvisionalCardConnection!
  getCard(id: ID!, keyId: String): SealedCard
  listCards(limit: Int, nextToken: String): SealedCardConnection!
  getTransaction(id: ID!, keyId: String): SealedTransaction
  listTransactions2(
    limit: Int
    nextToken: String
    dateRange: DateRangeInput
    sortOrder: SortOrder
  ): SealedTransactionConnection!
  listTransactionsByCardId2(
    cardId: ID!
    limit: Int
    nextToken: String
    dateRange: DateRangeInput
    sortOrder: SortOrder
  ): SealedTransactionConnection!
  listTransactionsByCardIdAndType(
    cardId: ID!
    transactionType: TransactionType!
    limit: Int
    nextToken: String
  ): SealedTransactionConnection!
}

type Mutation {
  createPublicKeyForVirtualCards(input: CreatePublicKeyInput!): PublicKey!
  setupFundingSource(
    input: SetupFundingSourceRequest!
  ): ProvisionalFundingSource!
  completeFundingSource(input: CompleteFundingSourceRequest!): FundingSource!
  refreshFundingSource(input: RefreshFundingSourceRequest!): FundingSource!
  cancelFundingSource(input: IdInput!): FundingSource!
  cardProvision(input: CardProvisionRequest!): ProvisionalCard!
  updateCard(input: CardUpdateRequest): SealedCard!
  cancelCard(input: CardCancelRequest!): SealedCard!
}

type Subscription {
  onFundingSourceUpdate(owner: ID!): FundingSource
}
